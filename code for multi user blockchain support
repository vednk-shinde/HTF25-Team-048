from ecdsa import SigningKey, VerifyingKey, SECP256k1
import hashlib
import time
import json

# -------------------- Transaction Class --------------------
class Transaction:
    def _init_(self, sender_public_key, recipient_public_key, amount):
        self.sender_public_key = sender_public_key
        self.recipient_public_key = recipient_public_key
        self.amount = amount
        self.signature = None

    def calculate_hash(self):
        return hashlib.sha256(
            f"{self.sender_public_key.to_string().hex() if self.sender_public_key else None}" \
            f"{self.recipient_public_key.to_string().hex() if self.recipient_public_key else None}" \
            f"{self.amount}".encode()
        ).hexdigest()

    def sign_transaction(self, sender_private_key):
        self.signature = sender_private_key.sign(self.calculate_hash().encode())

    def is_valid(self):
        if self.signature is None:
            return False
        return self.sender_public_key.verify(self.signature, self.calculate_hash().encode())

# -------------------- Block Class --------------------
class Block:
    def _init_(self, index, previous_hash, timestamp, transactions, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.transactions = transactions
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_data = json.dumps({
            'index': self.index,
            'previous_hash': self.previous_hash,
            'timestamp': self.timestamp,
            'transactions': [
                {
                    'sender_public_key': tx.sender_public_key.to_string().hex() if tx.sender_public_key else None,
                    'recipient_public_key': tx.recipient_public_key.to_string().hex() if tx.recipient_public_key else None,
                    'amount': tx.amount,
                    'signature': tx.signature.hex() if tx.signature else None
                } for tx in self.transactions
            ],
            'nonce': self.nonce
        }, sort_keys=True).encode()
        return hashlib.sha256(block_data).hexdigest()

    def mine_block(self, difficulty):
        target = '0' * difficulty
        while self.hash[:difficulty] != target:
            self.nonce += 1
            self.hash = self.calculate_hash()

# -------------------- Blockchain Class --------------------
class Blockchain:
    def _init_(self):
        self.chain = [self.create_genesis_block()]
        self.difficulty = 2
        self.pending_transactions = []

    def create_genesis_block(self):
        return Block(0, "0", int(time.time()), [])

    def get_latest_block(self):
        return self.chain[-1]

    def add_transaction(self, transaction):
        if not transaction.is_valid():
            raise Exception("Invalid transaction")
        self.pending_transactions.append(transaction)

    def mine_pending_transactions(self):
        block = Block(len(self.chain), self.get_latest_block().hash, int(time.time()), self.pending_transactions)
        block.mine_block(self.difficulty)
        self.chain.append(block)
        self.pending_transactions = []

    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i-1]
            if current.hash != current.calculate_hash():
                return False
            if current.previous_hash != previous.hash:
                return False
        return True

# -------------------- Wallet Creation --------------------
def create_wallet():
    private_key = SigningKey.generate(curve=SECP256k1)
    public_key = private_key.get_verifying_key()
    return private_key, public_key

# -------------------- Main Execution --------------------
if _name_ == "_main_":
    # Create wallets for 3 users
    userA_private, userA_public = create_wallet()
    userB_private, userB_public = create_wallet()
    userC_private, userC_public = create_wallet()

    print("User A Public Key:", userA_public.to_string().hex())
    print("User B Public Key:", userB_public.to_string().hex())
    print("User C Public Key:", userC_public.to_string().hex())

    # Initialize blockchain
    my_chain = Blockchain()

    # Create transactions
    tx1 = Transaction(userA_public, userB_public, 100)
    tx1.sign_transaction(userA_private)
    my_chain.add_transaction(tx1)

    tx2 = Transaction(userB_public, userC_public, 50)
    tx2.sign_transaction(userB_private)
    my_chain.add_transaction(tx2)

    tx3 = Transaction(userC_public, userA_public, 25)
    tx3.sign_transaction(userC_private)
    my_chain.add_transaction(tx3)

    # Mine transactions
    print("\nMining pending transactions...")
    my_chain.mine_pending_transactions()

    # Validate blockchain
    print("\nIs blockchain valid?", my_chain.is_chain_valid())
    print("Blockchain length:", len(my_chain.chain))

    # Print block hashes
    for i, block in enumerate(my_chain.chain):
        print(f"Block {i} Hash: {block.hash}")
